/*
pub struct BlockHeader {
    pub parent_hash: Hash,
    pub merkle_root: Hash,
    pub state_root: Hash,
    pub mix_nonce: Hash,
    pub coinbase: Address,
    #[getter(skip)]
    pub difficulty: u32,
    pub chain_id: u32,
    pub level: i32,
    pub time: u32,
    pub nonce: u128,
}
 */

syntax = "proto3";
package blockchain;

message Empty {}

message BlockHeader {
  string parent_hash = 1;
  string merkle_root = 2;
  string state_root = 3;
  string mix_nonce = 4;
  string coinbase = 5;
  uint32 difficulty = 6;
  uint32 chain_id = 7;
  int32 level = 8;
  uint32 time = 9;
  string nonce = 10;
}

message GetBlockRequest {
  oneof query {
    string hash = 1;
    int32 level = 2;
  }
}

message GetBlockResponse {
  BlockHeader header = 1;
}

message GetBlocksRequest {
  message FromHash {
    string from = 1;
    uint32 count = 2;
  }

  message FromLevel {
    int32 from = 1;
    uint32 count = 2;
  }

  oneof query {
    FromHash from_hash = 1;
    FromLevel from_level = 2;
  }
}

message GetBlocksResponse {
  repeated BlockHeader blocks = 1;
}
message GetHeadResponse {
  BlockHeader block = 1;
}

message GetBlockNumberResponse {
  int32 level = 1;
}

service BlockchainRPCService {
  rpc GetHead(Empty) returns (GetHeadResponse);
  rpc GetBlockNumber(Empty) returns (GetBlockNumberResponse);
  rpc GetBlock (GetBlockRequest) returns (GetBlockResponse);
  rpc GetBlocks (GetBlocksRequest) returns (GetBlocksResponse);
}
